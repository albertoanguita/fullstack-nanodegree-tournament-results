-- Table definitions for the tournament project.
--
-- Put your SQL 'create table' statements in this file; also 'create view'
-- statements if you choose to use it.
--
-- You can write comments in this file by starting them with two dashes, like
-- these lines here.


--------------------------------------------------------------------------------
-- tournament database structure --                                           --
-----------------------------------                                           --
-- This script file contains the sql commands to create the schema of the     --
-- tournament database. The database is composed of two tables: 'players' and --
-- 'matches'. The former stores information about the registered players, and --
-- the latter about already finished matches between players.                 --
--                                                                            --
-- The file also includes the definition of four views for facilitating the   --
-- retrieval of data in the python application.                               --
--------------------------------------------------------------------------------



-- tournament database creation and connection commands
CREATE DATABASE tournament;
\c tournament;


-- stores information about registered players. For each
-- player, we store a unique id, and the players name
CREATE TABLE players (

  -- unique id of the player. This attribute is the primary key of the table,
  -- and is defined as a SERIAL value so it is auto-incremented by the RDMS
  id SERIAL PRIMARY KEY,

  -- name of the player
  name TEXT
);


-- stores information about the results of matches between players. For each
-- match, we simply store the id of the winner and the id of the looser.
-- no id of the matches themselves is stored, since it is not referenced
-- anywhere else in the database
CREATE TABLE matches (

  -- id of the winner player, referencing a valid id in the 'players' table
  winner INTEGER REFERENCES players(id),

  -- id of the looser player, referencing a valid id in the 'players' table
  looser INTEGER REFERENCES players(id)
);


-- this view stores ids of players together with their total number of wins
-- use a left join so players with no wins correctly get 0 wins in the view
CREATE VIEW wins AS
  SELECT players.id, count(matches.winner) as wins
    FROM players LEFT JOIN matches
      ON players.id = matches.winner
    GROUP BY players.id;


-- this view stores ids of players together with their total number of looses
-- use a left join so players with no looses correctly get 0 looses in the view
CREATE VIEW looses AS
  SELECT players.id, count(matches.looser) as looses
    FROM players LEFT JOIN matches
      ON players.id = matches.looser
    GROUP BY players.id;


-- this view stores ids of players together with their total number of wins,
-- looses and amount of matches. The view is generated by joining the previous
-- 'wins' and 'looses' views
CREATE VIEW scores AS
  SELECT wins.id, wins.wins, looses.looses, wins.wins + looses.looses as matches
    FROM wins JOIN looses
      ON wins.id = looses.id;


-- this view was created to support the opponent match wins functionality. It
-- stores the information of the 'scores' view, plus an extra field with the
-- value of OMW for each player. This value is obtained by defining two scalar
-- subqueries that retrieve the number of wins of opponents of the player in
-- the outer query. The first scalar subquery collects the wins of opponents
-- in matches where the player was winner and the second scalar subquery does
-- the same, but with opponents in matches where the player was looser
CREATE VIEW scores_extended AS
  SELECT id, wins, looses, matches, (SELECT COALESCE(SUM(wins), 0) FROM wins LEFT JOIN matches ON wins.id = matches.winner WHERE matches.looser = scores.id) + (SELECT COALESCE(SUM(wins), 0) FROM wins LEFT JOIN matches ON wins.id = matches.looser WHERE matches.winner = scores.id) as opp_wins
    FROM scores;

