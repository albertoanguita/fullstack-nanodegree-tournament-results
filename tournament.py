#!/usr/bin/env python
# 
# tournament.py -- implementation of a Swiss-system tournament
#

import psycopg2


def connect():
    """Connect to the PostgreSQL database.  Returns a database connection."""
    return psycopg2.connect("dbname=tournament")



def deleteMatches():
    """Remove all the match records from the database."""
    DB = connect()
    cur = DB.cursor()
    # to delete the matches, simply remove all data from the "matches" table
    # using a "DELETE" command
    cur.execute("delete from matches")
    DB.commit()
    DB.close()


def deletePlayers():
    """Remove all the player records from the database."""
    DB = connect()
    cur = DB.cursor()
    # to delete the matches, simply remove all data from the "players" table
    # using a "DELETE" command
    cur.execute("delete from matches")
    cur.execute("delete from players")
    DB.commit()
    DB.close()


def countPlayers():
    """Returns the number of players currently registered."""
    DB = connect()
    cur = DB.cursor()
    # the number of players is given by the number of rows in the "players"
    # table. A "SELECT" command with a count operator returns this value
    cur.execute("select count(*) as player_count from players")
    count = cur.fetchone()[0]
    DB.close()
    return count


def registerPlayer(name):
    """Adds a player to the tournament database.
  
    The database assigns a unique serial id number for the player.  (This
    should be handled by your SQL database schema, not in your Python code.)
  
    Args:
      name: the player's full name (need not be unique).
    """
    DB = connect()
    cur = DB.cursor()
    # use an "INSERT" command to add the new player to the "players" table
    # player name is added properly, avoiding SQL injection attacks
    cur.execute("insert into players(name) values(%s)", (name, ))
    DB.commit()
    DB.close()


def playerStandings():
    """Returns a list of the players and their win records, sorted by wins.

    The first entry in the list should be the player in first place, or a player
    tied for first place if there is currently a tie.

    Returns:
      A list of tuples, each of which contains (id, name, wins, matches):
        id: the player's unique id (assigned by the database)
        name: the player's full name (as registered)
        wins: the number of matches the player has won
        matches: the number of matches the player has played
    """
    DB = connect()
    cur = DB.cursor()
    # players score is stored in the "scored_extended" view. We join this table
    # with "players", to have the players name too. the results are ordered by
    # number of wins (in descending order), and then by number of wins of
    # opponents of the player (also in descending order), to implement the
    # opponent match wins strategy for calculating scores
    cur.execute("select players.id, players.name, scores_extended.wins, scores_extended.matches "
                "FROM players "
                "JOIN scores_extended ON players.id = scores_extended.id "
                "ORDER BY scores_extended.wins DESC, scores_extended.opp_wins DESC;")
    result = [(str(row[0]), str(row[1]), int(row[2]), int(row[3])) for row in cur.fetchall()]
    DB.close()
    return result


def reportMatch(winner, loser):
    """Records the outcome of a single match between two players.

    Args:
      winner:  the id number of the player who won
      loser:  the id number of the player who lost
    """
    DB = connect()
    cur = DB.cursor()
    # simply insert a new row in the "matches" table
    cur.execute("insert into matches values(%s, %s)", (winner, loser))
    DB.commit()
    DB.close()

 
def swissPairings():
    """Returns a list of pairs of players for the next round of a match.
  
    Assuming that there are an even number of players registered, each player
    appears exactly once in the pairings.  Each player is paired with another
    player with an equal or nearly-equal win record, that is, a player adjacent
    to him or her in the standings.
  
    Returns:
      A list of tuples, each of which contains (id1, name1, id2, name2)
        id1: the first player's unique id
        name1: the first player's name
        id2: the second player's unique id
        name2: the second player's name
    """
    # the list of standings is extracted, using the appropriate method
    standings = playerStandings()
    pairings = []
    # pairings are generated by taking pairs of adjacent elements from the
    # standings list
    for i in range(0, len(standings), 2):
        pairings.append((standings[i][0], standings[i][1], standings[i + 1][0], standings[i + 1][1]))
    return pairings
